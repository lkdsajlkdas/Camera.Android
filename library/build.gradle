// Copyright (C) 2016 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: 'git-version.gradle'
apply plugin: 'com.github.dcendents.android-maven'

repositories {
    mavenCentral()
    google()
    jcenter()
    maven { url "https://jitpack.io" }
}

group = 'com.github.smellouk'
version = '1.3.1'

if (file('src/dev/build.gradle').exists()) {
    apply from: 'src/dev/build.gradle'
}

def getDefaultPublishConfig = { ->
    def publishConfig = System.getenv("SDK_DEFAULT_PUBLISH_CONFIG")
    if (publishConfig == null || publishConfig.isEmpty())
        publishConfig = "prodRelease"
    return publishConfig
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        testApplicationId "io.nyris.camera.demo.test"
        minSdkVersion 14
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode gitVersionCode
        versionName gitVersionName
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            buildConfigField "String", "GIT_COMMIT_HASH", "\"" + gitCommitHash + "\""
            buildConfigField "String", "SDK_VERSION", "\"" + gitVersionName + "\""
        }
        release {
            minifyEnabled false
            buildConfigField "String", "GIT_COMMIT_HASH", "\"" + gitCommitHash + "\""
            buildConfigField "String", "SDK_VERSION", "\"" + gitVersionName + "\""
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    sourceSets {
        dev.java.srcDirs += 'src/dev/java/ai'
        dev.java.srcDirs += 'src/dev/java/ai/api14'
        dev.java.srcDirs += 'src/dev/java/ai/api21'
        dev.java.srcDirs += 'src/dev/java/ai/api23'
        dev.java.srcDirs += 'src/dev/java/ai/recognizer'

        main.java.srcDirs += 'src/main/java/base'
        main.java.srcDirs += 'src/main/java/base/api9'
        main.java.srcDirs += 'src/main/java/base/api14'
        main.java.srcDirs += 'src/main/java/base/api21'
        main.java.srcDirs += 'src/main/java/base/api23'

        main.java.srcDirs += 'src/main/java/stream'
        main.java.srcDirs += 'src/main/java/stream/api9'
        main.java.srcDirs += 'src/main/java/stream/api14'
        main.java.srcDirs += 'src/main/java/stream/api21'
        main.java.srcDirs += 'src/main/java/stream/api23'

        main.java.srcDirs += 'src/main/java/barcode'
        main.java.srcDirs += 'src/main/java/barcode/api14'
        main.java.srcDirs += 'src/main/java/barcode/api21'
        main.java.srcDirs += 'src/main/java/barcode/api23'

        main.java.srcDirs += 'src/main/java/ai'
        main.java.srcDirs += 'src/main/java/ai/api14'
        main.java.srcDirs += 'src/main/java/ai/api21'
        main.java.srcDirs += 'src/main/java/ai/api23'

        prod.java.srcDirs += 'src/prod/java/ai'
        prod.java.srcDirs += 'src/prod/java/ai/api14'
        prod.java.srcDirs += 'src/prod/java/ai/api21'
        prod.java.srcDirs += 'src/prod/java/ai/api23'
    }

    flavorDimensions 'environment'
    productFlavors {
        dev {
            dimension 'environment'
        }
        prod {
            dimension 'environment'
        }
    }

    dexOptions {
        javaMaxHeapSize "2G"
    }

    defaultPublishConfig getDefaultPublishConfig()
    publishNonDefault true
}

dependencies {
    // Tests
    testImplementation 'junit:junit:4.12'
    androidTestImplementation('com.android.support.test:runner:1.0.1') {
        exclude module: 'support-annotations'
    }
    androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.1') {
        exclude module: 'support-annotations'
    }

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"

    //Support
    implementation "com.android.support:support-annotations:$supportLibraryVersion"
    implementation "com.android.support:support-v4:$supportLibraryVersion"
    implementation "com.android.support:exifinterface:$supportLibraryVersion"

    //Logger
    implementation 'com.jakewharton.timber:timber:4.7.0'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task classesJar(type: Jar) {
    from "$buildDir/intermediates/classes/release"
}

artifacts {
    archives classesJar
    archives javadocJar
    archives sourcesJar
}

